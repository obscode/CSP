#!/usr/bin/env python

import argparse
parser = argparse.ArgumentParser(description="Make LaTeX table of local sequencephotometry")
parser.add_argument('SN', help='Name of the SN from the database')
parser.add_argument('-standard', action='store_true',
      help="If specified, convert to standard photometry")
parser.add_argument('-tel', help='Name of telescope. Default: SWO',
      default='SWO')
parser.add_argument('-ins', help='Name of instrument. Default: DC',
      default='DC')
parser.add_argument('-db', help='Database to query',
      default='SBS')
parser.add_argument('-latex', help="Output in LaTeX table format",
      action='store_true')
parser.add_argument('-PS', help="Use PanStarrs-derived BVgri photometry",
      action='store_true')
parser.add_argument('-o', help="Name of output file. Default: name+_optls.tex",
      default=None)
args = parser.parse_args()

from astropy.io import ascii
from astropy.table import Table, join
import sys
from CSPlib import calibration as colorterms
from CSPlib.database import getConnection
from numpy import isnan

header = r'''\begin{deluxetable}{ccccccccc}
   \tablecolumns{9}
   \tablecaption{Optical local sequence photometry for %s\label{tab:LSPhot}}
   \tablehead{
      \colhead{ID} & \colhead{$\alpha$ (2000)} & \colhead{$\delta$ (2000)} & 
      \colhead{$u^\prime$} & \colhead{$g^\prime$} & 
      \colhead{$r^\prime$} & \colhead{$i^\prime$} &
      \colhead{$B$} & \colhead{$V$} }
   \startdata
'''
   
footer = r'''\enddata
\end{deluxetable}'''

def floatToCol(v,ev, fmt='%.3f'):
   if isnan(v): return "\\ldots     "
   st = fmt % (v)
   st = st+'('
   st = st + (fmt % (ev)).split('.')[1]
   st = st + ')'
   return st

if args.o is None:
   if args.latex:
      outfile = args.SN + "_optls.tex"
   else:
      outfile = args.SN + "_optls.dat"
else:
   outfile = args.o

db = getConnection(db=args.db)
c = db.cursor()

SN = args.SN

N = c.execute('''select NAME_CSP from SNList where SN=%s''', SN)
if N > 0:
   SN2 = c.fetchone()[0]
else:
   SN2 = SN

filts = ['u','B','V','g','r','i']

c.execute('''select OBJ,RA*15,DE from Coords WHERE SN=%s and OBJ > 0''',
          (SN,))
rows = c.fetchall()
tab = Table(rows=rows, names=['OBJ','RA','DEC'])

for filt in filts:
   if args.PS and filt in ['B','V','g','r','i']:
      c.execute("select OBJ,mag2,err2 from MAGLSEQ "\
                "where (field=%s or field=%s) and filt=%s", (SN,SN2,filt))
   else:
      c.execute("select OBJ,mag,err from MAGLSEQ "\
                "where (field=%s or field=%s) and filt=%s", (SN,SN2,filt))
   tab = join(tab, Table(rows=c.fetchall(), names=['OBJ',filt,'e_g'+filt]),
              keys='OBJ', join_type='left')

tab['OBJ'].info.format = "%3d"
tab['RA'].info.format = "%.6f"
tab['DEC'].info.format = "%.6f"
for col in tab.colnames[3:]:
   tab[col].info.format = "%.3f"

if args.standard:
   up,gp,rp,ip,B,V = colorterms.nat2stand(tab['u'],tab['g'],
         tab['r'],tab['i'], tab['B'], tab['V'],
         tel=args.tel, ins=args.ins)
   tab['u'][:] = up
   tab['g'][:] = gp
   tab['r'][:] = rp
   tab['i'][:] = ip
   tab['B'][:] = B
   tab['V'][:] = V

if args.latex:
   with open(outfile, 'w') as fout:
      fout.write(header % SN)
      for i in range(len(tab)):
         line = "%3d & %10.6f & %10.6f " % \
               (tab[i]['OBJ'],tab[i]['RA*15'], tab[i]['DE'])
         for filt in ['u','g','r','i','B','V']:
            if tab['mag'+filt].mask[i]:
               line = line + "& \\ldots     "
               continue
            line = line + "& " + floatToCol(tab[i]['mag'+filt],tab[i]['err'+filt])
         line = line + '\\\\\n'
         fout.write(line)
      fout.write(footer)
else:
   tab.write(outfile, format='ascii.fixed_width', delimiter=' ',
         fill_values=[(ascii.masked, 'nan')], overwrite=True)

