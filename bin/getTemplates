#!/usr/bin/env python

from CSPlib import getPS,getSM,getRefcat2,getPOSS
from CSPlib.fchart import Fchart
from CSPlib.calibration import PSstand2nat,SMstand2nat
from CSPlib.config import getconfig
from astropy.io import fits,ascii
from astropy.table import hstack
from matplotlib import pyplot as plt
from matplotlib import rcParams
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
from astropy.visualization import simple_norm
from astropy.wcs import WCS
from os.path import join,isfile
import numpy as np
import sys

rcParams['font.size'] = 18

cfg = getconfig()

# Where to put/look for stuff
fcharts = cfg.data.fcharts
templates = cfg.data.templates
chart_size = 0.35   # degrees
chart_filter = 'r'
Nstars = 20
useRefcat = True

if len(sys.argv) == 4:
   forceRedo = True
   l = [sys.argv[1:]]
else:         
   forceRedo = False
   todo = open(sys.argv[1])
   # Skip header line
   l = [l.strip().split() for l in todo.readlines()[1:]]

for sn,ra,dec in l:
   fchart = join(fcharts, '{}.png'.format(sn))
   ra = float(ra)
   dec = float(dec)

   # Skip if we've already done the work
   if isfile(fchart) and not forceRedo:
      continue
   fnames = [join(templates, "{}_{}.fits".format(sn,filt)) \
         for filt in ['g','r','i']]
   if isfile(join(templates, "{}_{}.fits".format(sn, 'r'))):
      flist = [fits.open(fname) for fname in fnames]
      skymap = 'TELESCOP' in flist[0][0].header and \
            flist[0][0].header['TELESCOP'] == 'SkyMapper'
      if skymap:
         flist = [(ft,ft) for ft in flist]
   else:
      skymap = False
      flist = getPS.getFITS(ra, dec, chart_size, 'gri', mosaic=True)
      if flist is None:
         print("Error, could not download PS image data "
             "for {}({:.5f}{:.5f}), trying SM".format(sn,ra,dec))
         flist = getSM.getFITS(ra, dec, chart_size, 'gri', mosaic=True)
         skymap = True
         if flist is None:
            print("Error, could not download SM image data "\
                  "for {}({:.5f}{:.5f})".format(sn,ra,dec))
            fts = getPOSS.getFITS(ra, dec, chart_size)
            flist = [fts,fts,fts]
            # Can't do template subtractions, so best is skip
            with open(join(templates, "{}_tskip".format(sn)), 'w') as fout:
               fout.write("\n")
            skymap = False
         else:
            # Skymapper comes back with mosaic FITS (first) and template (second)
            # We save the templates
            [flist[i][1].writeto(fnames[i], overwrite=True) for i in range(3)]
      else:
         # PS comes with just the mosaic
         [flist[i].writeto(fnames[i], overwrite=True) for i in range(3)]

   # Use r-band to make catalog and finder
   idx = ['g','r','i'].index(chart_filter)
   #      maxmag=19.0, outfile=join(templates, "{}.cat".format(sn)))
   if skymap:
      fts = flist[idx][0]
   else:
      fts = flist[idx]
   for key in fts[0].header.keys():
      if key[0:2] == 'PV':
         del fts[0].header[key]
   wcs = WCS(fts[0])
   if useRefcat:
      cat = getRefcat2.getStarCat(ra, dec, chart_size*0.707)  #0.5*sqrt(2)
   else:
      cat = getPS.getStarCat(ra, dec, chart_size*0.707)
      if cat is None:
         print("Error, could not download PS catalog, trying SM")
         cat = getSM.getStarCat(ra, dec, chart_size*0.707)
         if cat is None:
            print("Error, neither PS nor SM has a catalog!")

   if cat is not None:
      sids = np.argsort(cat['rmag'])
      cat = cat[sids]
      cat.insert_row(0, [0, ra, dec, -1,-1,-1,-1,-1,-1])
      cat['RA'].info.format = "%.8f"
      cat['DEC'].info.format = "%.8f"
      for filt in ['g','r','i']:
         cat[filt+'mag'].info.format="%.4f"
         cat[filt+'err'].info.format="%.4f"
      cat.write(join(templates, "{}.cat".format(sn)),format='ascii.fixed_width',
            delimiter=' ', overwrite=True)

      # Now make natural system catalog
      if skymap:
         nats = SMstand2nat(cat['gmag'],cat['rmag'],cat['imag'], cat['gerr'],
               cat['rerr'], cat['ierr'])
      else:
         nats = PSstand2nat(cat['gmag'],cat['rmag'],cat['imag'], cat['gerr'],
               cat['rerr'], cat['ierr'])
      newtab = hstack([cat,nats])
      newtab.remove_columns(['gmag','gerr','rmag','rerr','imag','ierr'])
      if 0 in newtab['objID']:
         idx = list(newtab['objID']).index(0)
         for filt in ['u','g','r','i','B','V']:
            newtab[idx][filt] = -1
            newtab[idx]['e'+filt] = -1
         newtab.write(join(templates, "{}.nat".format(sn)), 
               format='ascii.fixed_width', delimiter=' ', 
               fill_values=[(ascii.masked,'...')], overwrite=True)

      dists = np.sqrt(np.power(cat['RA']-ra,2)*np.cos(dec*np.pi/180)**2 + 
            np.power(cat['DEC']-dec,2))
      pids = []
      symbs = ['s', 'o', 'd', '^', 'v','<','>'][::-1]
      for magmin,magmax in [(11,12),(12,13),(13,14),(14,15),(16,17)]:
         gids = np.greater_equal(cat['rmag'],magmin)*np.less(cat['rmag'],magmax)
         gids = gids*np.less(dists, chart_size/2.1)*\
               np.greater(dists, chart_size/10)
         if not np.sometrue(gids):
            continue
         idx = np.argmin(dists[gids])
         pids.append(np.arange(len(gids))[gids][idx])
      offcat = cat[pids]
   else:
      offcat = None

   fig = Fchart(fts, percent=99.5, offsetcat=offcat, zoomfac=5, fixnan=True,
                sn=sn)
   fig.savefig(fchart) 
   plt.close(fig)
   
