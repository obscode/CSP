#!/usr/bin/env python

#from CSPlib.getPS import getPS.getStarCat,getPS.getFITS
from CSPlib.database import getConnection
from CSPlib import getPS
from astropy.io import fits
import pymysql
from matplotlib import pyplot as plt
from matplotlib import rcParams
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
from astropy.visualization import simple_norm
from astropy.wcs import WCS
from os.path import join,isfile
import os
import numpy as np
import sys

rcParams['font.size'] = 18

# Where to put/look for stuff
fcharts = join(os.environ['HOME'],'fcharts')
templates = join(os.environ['HOME'],'templates')
chart_size = 0.25   # degrees
chart_filter = 'r'
Nstars = 20

db = getConnection()
c = db.cursor()
if len(sys.argv) > 1:
   l = []
   # name on command-line
   for arg in sys.argv[1:]:
      c.execute('''select RA,DE from SNList where SN=%s''', (arg,))
      r = c.fetchall()
      if len(r) == 0:
         print("Ojbect {} not found in database, skipping".format(arg))
         continue
      l.append([arg,r[0][0],r[0][1]])
else:      
   # list of all objects in the queue
   snlist = c.execute('''select SN,RA,DE from SNList where QSWO > 0''')
   l = c.fetchall()

#todo = open('/Volumes/GoogleDrive/Shared drives/CSP/Swope/todo.list')
#l = [l.strip().split() for l in todo.readlines()[1:]]

for sn,ra,dec in l:
   fchart = join(fcharts, '{}.png'.format(sn))
   ra = float(ra)*15   # Sigh
   dec = float(dec)

   # Skip if we've already done the work
   if isfile(fchart):
      continue
   fnames = [join(templates, "{}_{}.fits".format(sn,filt)) \
         for filt in ['g','r','i']]
   if isfile(join(templates, "{}_{}.fits".format(sn, 'r'))):
      flist = [fits.open(fname) for fname in fnames]
   else:
      try:
         flist = getPS.getFITS(ra, dec, chart_size, 'gri', mosaic=True)
         if flist is None:
            flist = getSM.getFITS(ra, dec, chart_size, 'gri', mosaic=True)
      except:
         print("Error, could not download PS image data "
             "for {}({:.5f}{:.5f})".format(sn,ra,dec))
         continue
      [flist[i].writeto(fnames[i], overwrite=True) for i in range(3)]

   # Use r-band to make catalog and finder
   idx = ['g','r','i'].index(chart_filter)
   #      maxmag=19.0, outfile=join(templates, "{}.cat".format(sn)))
   fts = flist[idx]
   wcs = WCS(fts[0])
   cat = getPS.getStarCat(ra, dec, chart_size/2)
   if cat is None:
      cat = getSM.getStarCat(ra, dec, chart_size/2)
      if cat is None:
         print("Error, could not download catalog data "
             "for {}({:.5f}{:.5f})".format(sn,ra,dec))
         continue

   sids = np.argsort(cat['rmag'])
   cat.insert_row(0, [0, ra, dec, -1, -1, -1, -1, -1, -1])
   cat.write(join(templates, "{}.cat".format(sn)), format='ascii.fixed_width',
         delimiter=' ', overwrite=True)
   dists = np.sqrt(np.power(cat['RA']-ra,2)*np.cos(dec*np.pi/180)**2 + 
         np.power(cat['DEC']-dec,2))
   pids = []
   symbs = ['s', 'o', 'd', '^', 'v','<','>'][::-1]
   for magmin,magmax in [(11,12),(12,13),(13,14),(14,15),(16,17)]:
      gids = np.greater_equal(cat['rmag'], magmin)*np.less(cat['rmag'],magmax)
      if not np.sometrue(gids):
         continue
      idx = np.argmin(dists[gids])
      pids.append(np.arange(len(gids))[gids][idx])

   fig = plt.figure(figsize=(9,9))
   ax = fig.add_subplot(111, projection=wcs)
   plt.subplots_adjust(left=0.2)
   ax.imshow(fts[0].data, origin='lower', norm=simple_norm(fts[0].data,
      min_cut=-300, max_cut=1000), cmap='gray_r')
   #ii,jj = wcs.wcs_world2pix(cat['RA'][pids], cat['DEC'][pids], 0)
   #ax.plot(ii, jj, 'o', mec='blue', mfc='none', ms=20)
   ax.plot([0.3,0.48],[0.5, 0.5], '-', color='red', alpha=0.5,
      transform=ax.transAxes)
   ax.plot([0.52,0.7],[0.5, 0.5], '-', color='red', alpha=0.5,
      transform=ax.transAxes)
   ax.plot([0.5,0.5],[0.3, 0.48], '-', color='red', alpha=0.5,
      transform=ax.transAxes)
   ax.plot([0.5,0.5],[0.52, 0.7], '-', color='red', alpha=0.5,
      transform=ax.transAxes)
   ax.set_xlabel('RA (J2000)')
   ax.set_ylabel('DEC (J2000)')
   for i in pids:
      dx = np.cos(dec*np.pi/180)*(cat['RA'][i]-ra)*3600
      dy = (cat['DEC'][i]-dec)*3600
      mag = cat['rmag'][i]
      ii,jj = wcs.wcs_world2pix(cat['RA'][i], cat['DEC'][i], 0)
      ax.plot(ii, jj, symbs.pop(), mec='blue', mfc='none', ms=20,
            label="({:.1f},{:.1f})".format(dx,dy))
      #ax.text(ii[i]+30, jj[i]+45, "{:.1f}\n{:.1f}".format(dx,dy), color='blue',
      #      fontsize=12, ha='right', va='bottom')

   ins = inset_axes(ax, width="100%", height="100%",
         bbox_to_anchor=(0.7,0.7, 0.4, 0.4), bbox_transform=ax.transAxes)
   ax.legend(loc='upper left', fontsize=10, markerscale=0.5)
   ins.tick_params(left=False, right=False, bottom=False, top=False)
   ins.axes.get_xaxis().set_visible(False)
   ins.axes.get_yaxis().set_visible(False)
   size = max(fts[0].data.shape)
   x0 = size//2 - size//8
   x1 = size//2 + size//8
   y0 = size//2 - size//8
   y1 = size//2 + size//8

   subdata = fts[0].data[x0:x1,y0:y1]
   ins.imshow(subdata,origin='lower',
         norm=simple_norm(subdata, min_cut=-300, max_cut=1000),
         cmap='gray_r')
   ins.plot([0.25,0.45],[0.5, 0.5], '-', color='red', alpha=0.5,
      transform=ins.transAxes)
   ins.plot([0.55,0.75],[0.5, 0.5], '-', color='red', alpha=0.5,
      transform=ins.transAxes)
   ins.plot([0.5,0.5],[0.25, 0.45], '-', color='red', alpha=0.5,
      transform=ins.transAxes)
   ins.plot([0.5,0.5],[0.55, 0.75], '-', color='red', alpha=0.5,
      transform=ins.transAxes)

   ax.plot([0.95,0.85],[0.05,0.05], '-', color='blue', transform=ax.transAxes)
   ax.plot([0.95,0.95],[0.05,0.15], '-', color='blue', transform=ax.transAxes)
   ax.text(0.84, 0.05, 'E', fontsize=16, color='blue', transform=ax.transAxes,
         ha='right', va='center')
   ax.text(0.95, 0.17, 'N', fontsize=16, color='blue', transform=ax.transAxes,
         ha='center', va='bottom')

   ax.set_title(sn, loc='left')


   i0,j0 = size*0.05,size*0.05
   x0,y0 = wcs.wcs_pix2world(i0, j0, 0)
   i1, j1 = wcs.wcs_world2pix(x0 - 1/60, y0, 0)
   ax.plot([i0,i1],[j0,j1], '-', color='blue')
   ax.text((i0+i1)/2, j0-10, "1'", color='blue', ha='center', va='top')


   fig.savefig(fchart) 
   

