#!/usr/bin/env python

from CSPlib.getPS import getStarCat,getFITS
from CSPlib.database import getConnection
from astropy.io import fits
import pymysql
#import aplpy
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt
from matplotlib import rcParams
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
from astropy.visualization import simple_norm
from astropy.wcs import WCS
from os.path import join,isfile
import numpy as np
import argparse

p = argparse.ArgumentParser(description='Make CSP2.5 finder charts from Swope Queue')
p.add_argument('-chartdir', default='fcharts', help='Where to store the charts')
p.add_argument('-fitsdir', default='templates', help='Where to store the FITS files')
p.add_argument('-size', default=0.25, type=float, help='Size in degrees')
p.add_argument('-filt', default='r', help='Which filter to use to make chart')
p.add_argument('-Nstars', default=20, type=int, help='Number of stars to highlight')
p.add_argument('-db', default='LCO', help='Which database to access (LCO/SBS)')

args = p.parse_args()

rcParams['font.size'] = 18

# Where to put/look for stuff
fcharts = args.chartdir
templates = args.fitsdir
chart_size = args.size
chart_filter = args.filt
Nstars = args.Nstars

db = getConnection(args.db)
# list of all objects in the queue
c = db.cursor()
snlist = c.execute('''select SN,RA,DE from SNList where QSWO > 0''')
l = c.fetchall()

for sn,ra,dec in l:
   print('*********** {} **********'.format(sn))
   fchart = join(fcharts, '{}.png'.format(sn))
   print(fchart)
   ra = ra*15   # Sigh

   # Skip if we've already done the work
   if isfile(fchart):
      print('skipping')
      continue
   fnames = [join(templates, "{}_{}.fits".format(sn,filt)) \
         for filt in ['g','r','i']]
   if isfile(join(templates, "{}_{}.fits".format(sn, 'r'))):
      flist = [fits.open(fname) for fname in fnames]
   else:
      #try:
      flist = getFITS(ra, dec, chart_size, 'gri', mosaic=True)
      #except:
      #   print("Error, could not download PS image data "
      #       "for {}({:.5f}{:.5f})".format(sn,ra,dec))
      #   continue
      [flist[i].writeto(fnames[i], overwrite=True) for i in range(3)]

   # Use r-band to make catalog and finder
   idx = ['g','r','i'].index(chart_filter)
   #      maxmag=19.0, outfile=join(templates, "{}.cat".format(sn)))
   fts = flist[idx]
   wcs = WCS(fts[0])
   cat = getStarCat(ra, dec, chart_size/2)
   sids = np.argsort(cat['rmag'])
   cat = cat[sids[0:Nstars]]

   fig = plt.figure(figsize=(9,9))
   ax = fig.add_subplot(111, projection=wcs)
   plt.subplots_adjust(left=0.2)
   ax.imshow(fts[0].data, origin='lower', norm=simple_norm(fts[0].data,
      min_cut=-300, max_cut=1000), cmap='gray_r')
   ii,jj = wcs.wcs_world2pix(cat['RA'], cat['DEC'], 0)
   ax.plot(ii, jj, 'o', mec='blue', mfc='none', ms=20)
   ax.plot([0.25,0.75],[0.5, 0.5], '-', color='red', alpha=0.5,
      transform=ax.transAxes)
   ax.plot([0.5,0.5],[0.25, 0.75], '-', color='red', alpha=0.5,
      transform=ax.transAxes)
   ax.set_xlabel('RA (J2000)')
   ax.set_ylabel('DEC (J2000)')
   for i in range(len(cat)):
      dx = np.cos(dec*np.pi/180)*(cat['RA'][i]-ra)*3600
      dy = (cat['DEC'][i]-dec)*3600
      ax.text(ii[i]+30, jj[i]+45, "{:.1f}\n{:.1f}".format(dx,dy), color='blue',
            fontsize=12, ha='right', va='bottom')

   ins = inset_axes(ax, width="100%", height="100%",
         bbox_to_anchor=(0.7,0.7, 0.4, 0.4), bbox_transform=ax.transAxes)
   ins.tick_params(left=False, right=False, bottom=False, top=False)
   ins.axes.get_xaxis().set_visible(False)
   ins.axes.get_yaxis().set_visible(False)
   size = max(fts[0].data.shape)
   x0 = size//2 - size//8
   x1 = size//2 + size//8
   y0 = size//2 - size//8
   y1 = size//2 + size//8

   subdata = fts[0].data[x0:x1,y0:y1]
   ins.imshow(subdata,origin='lower',
         norm=simple_norm(subdata, min_cut=-300, max_cut=1000),
         cmap='gray_r')

   ax.plot([0.95,0.85],[0.05,0.05], '-', color='blue', transform=ax.transAxes)
   ax.plot([0.95,0.95],[0.05,0.15], '-', color='blue', transform=ax.transAxes)
   ax.text(0.84, 0.05, 'E', fontsize=16, color='blue', transform=ax.transAxes,
         ha='right', va='center')
   ax.text(0.95, 0.17, 'N', fontsize=16, color='blue', transform=ax.transAxes,
         ha='center', va='bottom')

   ax.set_title(sn, loc='left')


   i0,j0 = size*0.05,size*0.05
   x0,y0 = wcs.wcs_pix2world(i0, j0, 0)
   i1, j1 = wcs.wcs_world2pix(x0 - 1/60, y0, 0)
   ax.plot([i0,i1],[j0,j1], '-', color='blue')
   ax.text((i0+i1)/2, j0-10, "1'", color='blue', ha='center', va='top')


   print('saving to ',fchart)
   fig.savefig(fchart) 
   

