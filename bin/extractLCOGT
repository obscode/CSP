#!/usr/bin/evn python

import argparse
parser = argparse.ArgumentParser(description="Extract imagining data and "\
          "tables from LCOGT extended FITS file")
parser.add_argument('fitsfiles', help='List of FITS.fz files', nargs="+")
parser.add_argument('-imHDU', help='HDU index of image', type=int, default=1)
parser.add_argument('-catHDU', help='HDU index of catalog', type=int, default=2)
parser.add_argument('-bpmHDU', help='HDU index of BPM', type=int, default=3)
parser.add_argument('-sigHDU', help='HDU index of sigma', type=int, default=4)
args = parser.parse_args()

from astropy.io import fits
from astropy.table import Table
from CSPlib.filesystem import LCOGTname
import sys

for fil in args.fitsfiles:
   fts = fits.open(fil)
   if args.imHDU > len(fts) -1:  
      print("Bad imHDU. This FITS file only has {} extensions".format(len(fts)))
      sys.exit(1)
   oname = LCOGTname(fts, HDU=args.imHDU)
   img = fits.HDUList()
   img.append(fits.PrimaryHDU(header=fts[args.imHDU].header, 
       data=fts[args.imHDU].data))
   img.writeto(oname, overwrite=True)

   if args.catHDU > 0:
      if args.catHDU > len(fts) -1:  
         print("Bad catHDU. This FITS file only has {} extensions".format(len(fts)))
         sys.exit(1)
      cat = Table(fts[args.catHDU].data)
      cat.write(oname.replace('.fits','.cat'), format='ascii.fixed_width', 
                delimiter=' ', overwrite=True)

   if args.bpmHDU > 0:
      if args.bpmHDU > len(fts) -1:  
         print("Bad bpmHDU. This FITS file only has {} extensions".format(len(fts)))
         sys.exit(1)
      bpm = fits.HDUList()
      bpm.append(fits.PrimaryHDU(header=fts[args.bpmHDU].header, 
                data=fts[args.bpmHDU].data))
      bpm.writeto(oname.replace('.fits','_bpm.fits'), overwrite=True)

   if args.sigHDU > 0:
      if args.sigHDU > len(fts) -1:  
         print("Bad sigHDU. This FITS file only has {} extensions".format(len(fts)))
         sys.exit(1)
      sig = fits.HDUList()
      sig.append(fits.PrimaryHDU(header=fts[args.sigHDU].header, 
                 data=fts[args.sigHDU].data))
      sig.writeto(oname.replace('.fits','_sigma.fits'), overwrite=True)
