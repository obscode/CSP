#!/usr/bin/env python

import argparse
parser = argparse.ArgumentParser(
   description="Plot SN lightcurve with interactive tools to examine photometry"
   )
parser.add_argument('SN', help='Name of the SN')
parser.add_argument('-db', help='Database to pull from. Default:  POISE',
      default='POISE')
parser.add_argument('-f', help='Filter to plot (default:  all)',
      default='all')
parser.add_argument('-PS', help='Use PS/SM catalogs for calibration', 
      action='store_true')
args = parser.parse_args()

import matplotlib

from CSPlib.database import getConnection
from matplotlib import pyplot as plt
from matplotlib.gridspec import GridSpec
from astropy.table import Table,join
from matplotlib import image as mpimg
import numpy as np
import glob, os

def printit(event):
   print(event.mouseevent.inaxes.tab[event.ind[0]][0])

def examine_night(event):
   if not plt.fignum_exists(2):
      fig2 = plt.figure(num=2, tight_layout=True, figsize=(8,8))
      gs = GridSpec(3,2)
      ax1 = fig2.add_subplot(gs[0,:])
      ax1.xaxis.set_visible(False)
      ax1.yaxis.set_visible(False)
      ax2 = fig2.add_subplot(gs[1,0])
      ax3 = fig2.add_subplot(gs[1,1])
      ax4 = fig2.add_subplot(gs[2,0])
      ax5 = fig2.add_subplot(gs[2,1])
      ax2.set_xlabel('g-r')
      ax3.set_xlabel('m(std)')
      ax4.set_xlabel('X')
      ax5.set_xlabel('Y')
   else:
      fig2 = plt.figure(2)
      ax1,ax2,ax3,ax4,ax5 = fig2.axes

   a = event.artist
   row = a.tab[event.ind[0]]
   fits = row['fits']
   mSN = row['mag']
   base = fits.replace('.fits','')
   jpgs = glob.glob('/Volumes/ExtData1/POISE/*/*/{}SN_diff.jpg'.format(base))
   if len(jpgs):
      img = mpimg.imread(jpgs[0])
      if getattr(ax1, '_myimg', None) is not None:
         ax1._myimg.set_data(img)
         plt.draw()
      else:
         ax1._myimg = ax1.imshow(img)
   ax1.set_title(fits)
   N = c.execute(query2, (row['fits'],))
   if N > 0:
      rows = c.fetchall()
      tab = Table(rows=rows, names=['obj','mag','emag','mstd','x','y'])
      tab = join(tab, ctab, keys='obj')
      if getattr(ax2, '_myeb1', None) is not None:
         ax2._myeb1.remove()
         ax2._myhl.set_ydata([row['mag']]*2)
         ax2._myhl2.set_ydata([row['mag']-row['err']]*2)
         ax2._myhl3.set_ydata([row['mag']+row['err']]*2)
         ax3._myeb1.remove()
         ax3._myhl.set_ydata([row['mag']]*2)
         ax3._myhl2.set_ydata([row['mag']-row['err']]*2)
         ax3._myhl3.set_ydata([row['mag']+row['err']]*2)
         ax4._myeb1.remove()
         ax4._myhl.set_ydata([row['mag']]*2)
         ax4._myhl2.set_ydata([row['mag']-row['err']]*2)
         ax4._myhl3.set_ydata([row['mag']+row['err']]*2)
         ax5._myeb1.remove()
         ax5._myhl.set_ydata([row['mag']]*2)
         ax5._myhl2.set_ydata([row['mag']-row['err']]*2)
         ax5._myhl3.set_ydata([row['mag']+row['err']]*2)
      else:
         ax2._myhl = ax2.axhline(row['mag'])
         ax2._myhl2 = ax2.axhline(row['mag']-row['err'], linestyle='--')
         ax2._myhl3 = ax2.axhline(row['mag']+row['err'], linestyle='--')
         ax3._myhl = ax3.axhline(row['mag'])
         ax3._myhl2 = ax3.axhline(row['mag']-row['err'], linestyle='--')
         ax3._myhl3 = ax3.axhline(row['mag']+row['err'], linestyle='--')
         ax4._myhl = ax4.axhline(row['mag'])
         ax4._myhl2 = ax4.axhline(row['mag']-row['err'], linestyle='--')
         ax4._myhl3 = ax4.axhline(row['mag']+row['err'], linestyle='--')
         ax5._myhl = ax5.axhline(row['mag'])
         ax5._myhl2 = ax5.axhline(row['mag']-row['err'], linestyle='--')
         ax5._myhl3 = ax5.axhline(row['mag']+row['err'], linestyle='--')
      ax2._myeb1 = ax2.errorbar(tab['gr'], tab['mag'], tab['emag'],
               fmt='o', color='C0', picker=True)
      ax3._myeb1 = ax3.errorbar(tab['mstd'], tab['mag'], tab['emag'],
               fmt='o', color='C0', picker=True)
      ax4._myeb1 = ax4.errorbar(tab['x'], tab['mag'], tab['emag'],
               fmt='o', color='C0', picker=True)
      ax5._myeb1 = ax5.errorbar(tab['y'], tab['mag'], tab['emag'],
               fmt='o', color='C0', picker=True)
      ax2.tab = tab; ax3.tab = tab; ax4.tab = tab; ax5.tab = tab
      ax2.set_xlim(tab['gr'].min()-1, tab['gr'].max()+1)
      ax2.set_ylim(row['mag']-1, row['mag']+1)
      ax3.set_xlim(tab['mstd'].min()-0.5, tab['mstd'].max()+0.5)
      ax3.set_ylim(row['mag']-1, row['mag']+1)
      ax4.set_xlim(tab['x'].min()-5, tab['x'].max()+5)
      ax4.set_ylim(row['mag']-1, row['mag']+1)
      ax5.set_xlim(tab['y'].min()-5, tab['y'].max()+5)
      ax4.set_ylim(row['mag']-1, row['mag']+1)
   plt.draw()
   fig2.canvas.mpl_connect('pick_event', printit)
   fig2.show()


db = getConnection(db=args.db)
c = db.cursor()
# Local sequence residuals
query1 = '''SELECT MAGLSEQ.{0}-MAGINS.psf,
               sqrt(MAGINS.psfer*MAGINS.psfer+MAGLSEQ.{1}*MAGLSEQ.{1}),
               MAGLSEQ.obj,MAGLSEQ.filt,MAGINS.fits
           FROM MAGINS,MAGLSEQ
           WHERE MAGINS.filt=MAGLSEQ.filt
               and MAGINS.field=%s and MAGLSEQ.field=MAGINS.field and
               MAGLSEQ.obj=MAGINS.obj and
               MAGINS.qual<2 and MAGINS.psfer!=0 and MAGINS.psfer<0.2
               and MAGLSEQ.obj>0 and MAGLSEQ.rxi<20 and MAGLSEQ.ncal>{2}'''

# SN differential photometry
query2 = '''SELECT t2.obj, t1.psf-t2.psf+t3.{0}, 
                   sqrt(t1.psfer*t1.psfer + t2.psfer*t2.psfer + t3.{1}*t3.{1}),
                   t3.{0},t2.xc,t2.yc
            FROM MAGINS as t1, MAGINS as t2, MAGLSEQ as t3
            WHERE t1.fits = t2.fits and t1.field = t3.field and t2.obj=t3.obj
                  and t1.filt=t2.filt and t3.filt=t1.filt and t1.obj = -1 and
                  t2.obj > 0 and t1.qual < 2 and t2.qual < 2 and t2.psfer != 0
                  and t2.psfer < 0.2 and t3.rxi < 20 and t3.ncal > {2} 
                  and t1.fits=%s'''

# LS colors
query3 = '''SELECT t1.obj, t1.mag2-t2.mag2, 
                   sqrt(t1.err2*t1.err2 + t2.err2*t2.err2)
            FROM MAGLSEQ as t1, MAGLSEQ as t2
            WHERE t1.field=t2.field and t1.field=%s and t1.filt='g' and
                  t2.filt='r' and t1.obj=t2.obj'''

if args.PS:
   query1 = query1.format('mag2','err2','0')
   query2 = query2.format('mag2','err2','0')
else:
   query1 = query1.format('mag','err','2')
   query2 = query2.format('mag','err','2')

N = c.execute(query1, (args.SN,))
rows = c.fetchall()
tab = Table(rows=rows, names=['dmag','edmag','obj','filt','fits'])

N = c.execute(query3, (args.SN,))
rows = c.fetchall()
ctab = Table(rows=rows, names=['obj','gr','egr'])

N = c.execute('''select * from MAGSN where field=%s''', (args.SN,))
rows = c.fetchall()
stab = Table(rows=rows, names=['pk','night','field','obj','filt','fits','mag',
                              'err','nstars','fiterr','jd'])

fig1,ax = plt.subplots()
filters = list(set(tab['filt']))
filters.sort()
if args.f != 'all':
   if args.f not in filters:
      print("Error:  filter {} not found in database".format(args.f))
      sys.exit(1)
   filters = [args.f]
      
for filt in filters:
   t = stab[(stab['filt'] == filt)*(stab['obj']==-1)]
   ec = ax.errorbar(t['jd'], t['mag'], fmt='o',
      yerr=np.sqrt(t['err']**2+t['fiterr']**2), label=filt, picker=True)
   ec.lines[0].tab = t
   for lc in ec.lines[2]:
      lc.tab = t
#   t = tab[(tab['filt'] == filt)]
#   ec.lines[0].lstab = t
ax.invert_yaxis()
ax.set_xlabel('JD (days)')
ax.set_ylabel('mag')
ax.legend()
fig1.canvas.mpl_connect('pick_event', examine_night)
plt.show()
